#!/usr/bin/env bash
set -euo pipefail

platform_dir=$1
build_plan=$2
# NOTE: Current working directory is application source directory

buildpack_root="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

if [ ! -e "package.json" ]; then
    echo "(*) package.json not found."
    exit 100
fi

set +e
node_version="$(jq -r '.engines.node' package.json 2>/dev/null)"
set -e
if [ "${node_version}" = "" ]; then
    node_version="latest"
fi

# Partial implementation of semantic version matching
set +e
partcount="$(echo "${node_version}" | tr '.' ' ' | wc -w)"
major="$(echo "${node_version}" | grep -oE '^(~|\^)?[0-9]+' 2>/dev/null)"
minor="$(echo "${node_version}" | grep -oP '^(~|\^)?[0-9]+\.\K[0-9]+' 2>/dev/null | tr '[:upper:]' '[:lower:]')"
breakfix="$(echo "${node_version}" | grep -oP '^(~|\^)?[0-9]+\.[0-9]+\.\K[0-9]+' 2>/dev/null | tr '[:upper:]' '[:lower:]')"
set -e
# major, minor, and breakfix regex will remove "x" and "*" automatically
if [ "${major:0:1}" = "~" ]; then
    if [ "${partcount}" = "3" ] && [ "${minor}" != "" ]; then
        node_version="${major:1}.${minor}"
    else 
        node_version="${major:1}"
    fi
elif [ "${major:0:1}" = "^" ]; then
    node_version="${major:1}"
elif [ "${minor}" = "" ]; then
    node_version="${major}"
elif [ "${breakfix}" = "" ]; then
    node_version="${major}.${minor}"
fi

echo "(*) Requires latest available Node.js version matching \"${node_version}\""

cat >> "${build_plan}" << EOF
[[requires]]
  name = "chuxel/devcontainer-features/nodejs"
  [requires.metadata]
    build = true
    launch = true
    option_version="${node_version}"
EOF

# Still want to return false since we added a requirement
exit 0
